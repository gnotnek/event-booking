// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	entity "event-booking/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *Repository) Create(_a0 *entity.Event) (*entity.Event, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Event) (*entity.Event, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Event) *entity.Event); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Event) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *Repository) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByCriteria provides a mock function with given fields: criteria
func (_m *Repository) FilterByCriteria(criteria map[string]interface{}) ([]entity.Event, error) {
	ret := _m.Called(criteria)

	if len(ret) == 0 {
		panic("no return value specified for FilterByCriteria")
	}

	var r0 []entity.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) ([]entity.Event, error)); ok {
		return rf(criteria)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) []entity.Event); ok {
		r0 = rf(criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(criteria)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: id
func (_m *Repository) Find(id string) (*entity.Event, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *entity.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Event, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Event); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *Repository) FindAll() ([]entity.Event, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entity.Event
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.Event, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Event)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: name
func (_m *Repository) FindByName(name string) (*entity.Event, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for FindByName")
	}

	var r0 *entity.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Event, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Event); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookingsByEventID provides a mock function with given fields: eventID
func (_m *Repository) GetBookingsByEventID(eventID string) (entity.Event, error) {
	ret := _m.Called(eventID)

	if len(ret) == 0 {
		panic("no return value specified for GetBookingsByEventID")
	}

	var r0 entity.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.Event, error)); ok {
		return rf(eventID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.Event); ok {
		r0 = rf(eventID)
	} else {
		r0 = ret.Get(0).(entity.Event)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(eventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *Repository) Save(_a0 *entity.Event) (*entity.Event, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *entity.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Event) (*entity.Event, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Event) *entity.Event); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Event) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
